upload.php:
  code: 
    <?php
    require '/var/www/html/lib.php';

    define("UPLOAD_DIR", "/var/www/html/uploads/");

    if( isset($_POST['submit']) ) {
      if (!empty($_FILES["myFile"])) {
        $myFile = $_FILES["myFile"];

        if (!(check_file_type($_FILES["myFile"]) && filesize($_FILES['myFile']['tmp_name']) < 60000)) {
          echo '<pre>Invalid image file.</pre>';
          displayform();
        }

        if ($myFile["error"] !== UPLOAD_ERR_OK) {
            echo "<p>An error occurred.</p>";
            displayform();
            exit;
        }

        //$name = $_SERVER['REMOTE_ADDR'].'-'. $myFile["name"];
        list ($foo,$ext) = getnameUpload($myFile["name"]);
        $validext = array('.jpg', '.png', '.gif', '.jpeg');
        $valid = false;
        foreach ($validext as $vext) {
          if (substr_compare($myFile["name"], $vext, -strlen($vext)) === 0) {
            $valid = true;
          }
        }

        if (!($valid)) {
          echo "<p>Invalid image file</p>";
          displayform();
          exit;
        }
        $name = str_replace('.','_',$_SERVER['REMOTE_ADDR']).'.'.$ext;

        $success = move_uploaded_file($myFile["tmp_name"], UPLOAD_DIR . $name);
        if (!$success) {
            echo "<p>Unable to save file.</p>";
            exit;
        }
        echo "<p>file uploaded, refresh gallery</p>";

        // set proper permissions on the new file
        chmod(UPLOAD_DIR . $name, 0644);
      }
    } else {
      displayform();
    }
    ?>
  notes:
    upload directory => /var/www/html/uploads/
    it uses check_file_type function from lib.php and to be able to upload a file, check_file_type must return true
    allowed files => jpg,png,gif,jpeg
    size < 60000
    name of file is created by replacing '.' with '_' in senders_ip 
lib.php:
  code:
    <?php

    function getnameCheck($filename) {
      $pieces = explode('.',$filename);
      $name= array_shift($pieces);
      $name = str_replace('_','.',$name);
      $ext = implode('.',$pieces);
      #echo "name $name - ext $ext\n";
      return array($name,$ext);
    }

    function getnameUpload($filename) {
      $pieces = explode('.',$filename);
      $name= array_shift($pieces);
      $name = str_replace('_','.',$name);
      $ext = implode('.',$pieces);
      return array($name,$ext);
    }

    function check_ip($prefix,$filename) {
      //echo "prefix: $prefix - fname: $filename<br>\n";
      $ret = true;
      if (!(filter_var($prefix, FILTER_VALIDATE_IP))) {
        $ret = false;
        $msg = "4tt4ck on file ".$filename.": prefix is not a valid ip ";
      } else {
        $msg = $filename;
      }
      return array($ret,$msg);
    }

    function file_mime_type($file) {
      $regexp = '/^([a-z\-]+\/[a-z0-9\-\.\+]+)(;\s.+)?$/';
      if (function_exists('finfo_file')) {
        $finfo = finfo_open(FILEINFO_MIME);
        if (is_resource($finfo)) // It is possible that a FALSE value is returned, if there is no magic MIME database file found on the system
        {
          $mime = @finfo_file($finfo, $file['tmp_name']);
          finfo_close($finfo);
          if (is_string($mime) && preg_match($regexp, $mime, $matches)) {
            $file_type = $matches[1];
            return $file_type;
          }
        }
      }
      if (function_exists('mime_content_type'))
      {
        $file_type = @mime_content_type($file['tmp_name']);
        if (strlen($file_type) > 0) // It's possible that mime_content_type() returns FALSE or an empty string
        {
          return $file_type;
        }
      }
      return $file['type'];
    }

    function check_file_type($file) {
      $mime_type = file_mime_type($file);
      if (strpos($mime_type, 'image/') === 0) {
          return true;
      } else {
          return false;
      }  
    }

    function displayform() {
    ?>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post" enctype="multipart/form-data">
     <input type="file" name="myFile">
     <br>
    <input type="submit" name="submit" value="go!">
    </form>
    <?php
      exit();
    }


    ?> 
  notes:
    check_file_type function tests mime type of file uploaded
